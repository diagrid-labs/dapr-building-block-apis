{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "4 - Service Invocation Demo",
  "nextTour": "5 - Pub/Sub",
  "steps": [
    {
      "directory": "ResiliencyDemo",
      "description": "# BuildingBlockAPIsDemo\n\n![ResiliencyDemo](./images/s2s-resiliency-v1.png)\n\nNavigate to the BuildingBlockApisDemo folder:\n\n>> cd BuildingBlockApisDemo\n\nCheck the files and folders."
    },
    {
      "file": "BuildingBlockApisDemo/AppA/AppA.csproj",
      "description": "## AppA.csproj",
      "line": 1
    },
    {
      "file": "BuildingBlockApisDemo/AppA/Program.cs",
      "description": "# AppA Program.cs",
      "line": 1
    },
    {
      "file": "BuildingBlockApisDemo/AppB/AppB.csproj",
      "description": "## AppB.csproj",
      "line": 1
    },
    {
      "file": "BuildingBlockApisDemo/AppB/Program.cs",
      "description": "## AppB Program.cs",
      "line": 1
    },
    {
      "file": "BuildingBlockApisDemo/Resources/statestore-redis.yaml",
      "description": "## Dapr state store component",
      "line": 1
    },
    {
      "file": "BuildingBlockApisDemo/dapr.yaml",
      "description": "## Dapr multi-app run file\n\nRun AppA and AppB using the Dapr CLI:\n\n>> dapr run -f .",
      "line": 1
    },
    {
      "file": "BuildingBlockApisDemo/local.http",
      "description": "## Local.http\n\nThis file is used with the [VSCode REST extension](https://marketplace.visualstudio.com/items?itemName=humao.rest-client) to make HTTP requests to the applications and the Dapr sidecar.\n\n### Service invocation from AppA to AppB",
      "line": 3,
      "title": "local.http"
    },
    {
      "title": "Service Invocation Resiliency",
      "description": "![Resiliency service to service](./images/resiliency-s2s.PNG)"
    },
    {
      "title": "Simulate issue with AppB",
      "description": "## Simulate issue with AppB (Service invocation)\n\nLet's start AppA, but not AppB. Make a request to AppA, wait a couple of seconds and then start AppB.\n\nNavigate to AppA folder:\n\n>> cd AppA\n\nRun AppA with the Dapr CLI: \n>> dapr run --app-id app-a --app-port 5045 --dapr-http-port 3500 --resources-path \"../Resources\" -- dotnet run\n\nFirst make a request to AppA, then open a new terminal and navigate to AppB:\n\n`cd AppB`\n\nRun AppB with the Dapr CLI: \n\n`dapr run --app-id app-b --app-port 5047 --dapr-http-port 3502 --resources-path \"../Resources\" -- dotnet run`"
    },
    {
      "file": "BuildingBlockApisDemo/local.http",
      "description": "## Service invocation from AppA to AppB",
      "line": 3,
      "title": "local.http"
    },
    {
      "file": "BuildingBlockApisDemo/Resources/resiliency.yaml",
      "description": "## Dapr resiliency policy",
      "line": 1
    },
    {
      "title": "Resiliency outbound",
      "description": "![outbound resiliency](./images/resiliency-outbound.PNG)"
    },
    {
      "file": "BuildingBlockApisDemo/Resources/resiliency.yaml",
      "description": "## DefaultStatestoreComponentOutboundRetryPolicy",
      "line": 11
    },
    {
      "title": "Simulate an issue with the state store",
      "description": "## Simulate an issue with the state store\n\n1. Navigate to the BuildingBlockApisDemo folder and run AppA and AppB with multi-app run:\n\n>> dapr run -f .\n\n2. Open a new terminal and stop the `dapr_redis` container:\n\n`docker stop dapr_redis`\n\n\n3. Make a new request to AppA via the [`local.http`](./BuildingBlockApisDemo/local.http) file.\n   \n4. Wait a few seconds and start the `dapr_redis` container:\n\n`docker start dapr_redis`",
      "selection": {
        "start": {
          "line": 12,
          "character": 1
        },
        "end": {
          "line": 14,
          "character": 60
        }
      }
    },
    {
      "file": "BuildingBlockApisDemo/local.http",
      "description": "## Service invocation from AppA to AppB",
      "line": 3,
      "title": "local.http"
    }
  ]
}