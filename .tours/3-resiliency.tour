{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "3 - Dapr Resiliency",
  "nextTour": "4 - Durable Execution & Dapr Workflow",
  "steps": [
    {
      "title": "Resiliency service-to-service",
      "description": "![Resiliency service to service](./images/resiliency-s2s.PNG)"
    },
    {
      "directory": "ResiliencyDemo",
      "description": "# ResiliencyDemo\n\n[ResiliencyDemo diagrams in README](./README.md)\n\nNavigate to the ResiliencyDemo folder:\n\n>> cd ResiliencyDemo\n\nCheck the files and folders."
    },
    {
      "file": "ResiliencyDemo/AppA/AppA.csproj",
      "description": "## AppA.csproj",
      "line": 1
    },
    {
      "file": "ResiliencyDemo/AppA/Program.cs",
      "description": "# AppA Program.cs",
      "line": 1
    },
    {
      "file": "ResiliencyDemo/AppB/AppB.csproj",
      "description": "## AppB.csproj",
      "line": 1
    },
    {
      "file": "ResiliencyDemo/AppB/Program.cs",
      "description": "## AppB Program.cs",
      "line": 1
    },
    {
      "file": "ResiliencyDemo/Resources/statestore.yaml",
      "description": "## Dapr state store component",
      "line": 1
    },
    {
      "file": "ResiliencyDemo/dapr.yaml",
      "description": "## Dapr multi-app run file\n\nRun AppA and AppB using the Dapr CLI:\n\n>> dapr run -f .",
      "line": 1
    },
    {
      "file": "ResiliencyDemo/local.http",
      "description": "## Local.http\n\nThis file is used with the [VSCode REST extension](https://marketplace.visualstudio.com/items?itemName=humao.rest-client) to make HTTP requests to the applications and the Dapr sidecar.\n\n### Service invocation from AppA to AppB",
      "line": 3,
      "title": "local.http"
    },
    {
      "title": "Simulate issue with AppB",
      "description": "## Simulate issue with AppB (Service invocation)\n\nLet's start AppA, but not AppB. Make a request to AppA, wait a couple of seconds and then start AppB.\n\nNavigate to AppA folder:\n\n>> cd AppA\n\nRun AppA with the Dapr CLI: \n>> dapr run --app-id app-a --app-port 5045 --dapr-http-port 3500 --resources-path \"../Resources\" -- dotnet run\n\nFirst make a request to AppA, then open a new terminal and navigate to AppB:\n\n`cd AppB`\n\nRun AppB with the Dapr CLI: \n\n`dapr run --app-id app-b --app-port 5047 --dapr-http-port 3502 --resources-path \"../Resources\" -- dotnet run`"
    },
    {
      "file": "ResiliencyDemo/local.http",
      "description": "## Service invocation from AppA to AppB",
      "line": 3,
      "title": "local.http"
    },
    {
      "file": "ResiliencyDemo/Resources/resiliency.yaml",
      "description": "## Dapr resiliency policy",
      "line": 1
    },
    {
      "title": "Resiliency outbound",
      "description": "![outbound resiliency](./images/resiliency-outbound.PNG)"
    },
    {
      "file": "ResiliencyDemo/Resources/resiliency.yaml",
      "description": "## DefaultStatestoreComponentOutboundRetryPolicy",
      "line": 11
    },
    {
      "title": "Simulate an issue with the state store",
      "description": "## Simulate an issue with the state store\n\n1. Navigate to the ResiliencyDemo folder and run AppA and AppB with multi-app run:\n\n>> dapr run -f .\n\n2. Open a new terminal and stop the `dapr_redis` container:\n\n`docker stop dapr_redis`\n\n\n3. Make a new request to AppA via the [`local.http`](./ResiliencyDemo/local.http) file.\n   \n4. Wait a few seconds and start the `dapr_redis` container:\n\n`docker start dapr_redis`",
      "selection": {
        "start": {
          "line": 12,
          "character": 1
        },
        "end": {
          "line": 14,
          "character": 60
        }
      }
    },
    {
      "file": "ResiliencyDemo/local.http",
      "description": "## Service invocation from AppA to AppB",
      "line": 3,
      "title": "local.http"
    },
    {
      "title": "Resiliency pubsub",
      "description": "![Inbound and outbound resiliency](./images/resiliency-pubsub.PNG)"
    },
    {
      "file": "ResiliencyDemo/AppA/Program.cs",
      "description": "## AppA Program.cs /pubsub",
      "line": 17
    },
    {
      "directory": "ResiliencyDemo/Resources",
      "description": "## Rename pubsub and subscription YAML files\n\n1. Navigate to the Resources folder.\n2. Rename `pubsub.yaml.temp` to `pubsub.yaml`.\n3. Rename `subscription.yamp.temp` to `subscription.yaml`."
    },
    {
      "file": "ResiliencyDemo/Resources/pubsub.yaml",
      "description": "## Pubsub component",
      "line": 1
    },
    {
      "file": "ResiliencyDemo/Resources/subscription.yaml",
      "description": "## Subscription file\n\nThis is a declarative subscription to a topic. You can also use a programmatic way in code.",
      "line": 1
    },
    {
      "title": "Run AppA and AppB",
      "description": "## Simulate an issue with the message broker\n\n1. Ensure you're in the ResilienceDemo folder.\n\n2. Run AppA and AppB using the Dapr CLI with multi-app run:\n\n>> dapr run -f .\n\n\n3. Open a new terminal and stop the `dapr_redis` container:\n\n`docker stop dapr_redis`\n\n4. Make a new request to AppA via the [`local.http`](./ResiliencyDemo/local.http) file.\n   \n5. Wait a few seconds and start the `dapr_redis` container:\n\n`docker start dapr_redis`\n"
    },
    {
      "file": "ResiliencyDemo/local.http",
      "description": "## Pubsub from AppA to AppB",
      "line": 21,
      "title": "local.http"
    },
    {
      "title": "Conductor Advisories",
      "description": "## Check production readiness with Conductor Free\r\n\r\n- [Conductor Free Dashboard](https://conductor.diagrid.io)\r\n\r\n![Conductor Advisories](./images/conductor1.png)\r\n\r\n- [Conductor Free Info](https://diagrid.ws/conductor)"
    }
  ]
}